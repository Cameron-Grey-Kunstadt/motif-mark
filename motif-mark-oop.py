# Cameron Kunstadt
# UO import debugpy, platform
# 2/27/2025

#TODO: function to find exons

import argparse
import re
import bioinfo
import os

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--fasta",)  
parser.add_argument('-m', "--motif")
args = parser.parse_args()


class FastaRecord:
    def __init__(self, header, seq, unique_motif_list):
        self.header = header
        self.seq = seq
        self.length = len(seq)
        self.gene = self.parse_gene(header)
        self.needs_revcomp = self.parse_needs_revcomp(header)

        if self.needs_revcomp == True:
            self.seq = bioinfo.reverse_compliment(seq)

        self.unique_motif_list = unique_motif_list
        self.motif_object_list = []
        self.exon_start, self.exon_stop = self.get_exon_range(seq)

    
    def parse_gene(self, header):
        '''Pulls gene out of fasta header, assumes its the first letters & numbers
        until the first space'''
        gene_match = re.search(">[A-Z0-9]+", header)
        gene = gene_match.group()
        return gene[1:]
    
    def parse_needs_revcomp(self, header):
        '''Determines if the seq needs a reverse complement generated by
        scraping the header line for "reverse complement"'''
        rev_comp = re.search("reverse complement", header)
        
        try:
            if rev_comp.group():
                return True
        except AttributeError:
            return False
        
    def get_exon_range(self, seq):
        '''Gets the exon from the given sequence provided it has one, determines
        this by getting the first and last capital letter in the sequence'''
        capital_letters = list(re.finditer(r'[A-Z]', seq))
        exon_start = capital_letters[0].start()
        exon_stop = capital_letters[-1].start()

        return exon_start, exon_stop
    
    # def find_motifs(self, seq, unique_motif_list):
    #     '''Searches for all the instances of motifs in the given sequence
    #     and creates motif objects for each of them'''
    #     for motif in unique_motif_list:
    #         motif_instances = list(re.findall)
    #     return 0

seq = "asdkjfnkjcatJNKJNKJNKBcatjnkjncat"
motif = "cat"

def find_motif(seq, motif):
    motif_instances = list(re.finditer(motif, seq))

    print(motif_instances)

    for instance in motif_instances:
        x = instance.span()
        print(x[0])
        print(instance.span())

find_motif(seq, motif)

# class MotifClass:
#     def __init__(self, motif, color, seq_length, exon_start, exon_stop):
#         self.motif = motif
#         self.color = color
#         self.seq_length = seq_length
#         self.exon_start = exon_start
#         self.exon_stop = exon_stop

#     def draw_line(self):
#         return None



unique_motif_list = []

with open(args.motif, 'r') as motif_file:
    for line in motif_file:
        unique_motif_list.append(line.strip())

bioinfo.oneline_fasta(args.fasta, "temp_oneline.fasta")

with open("temp_oneline.fasta", 'r') as fasta:
    while True:
        header = fasta.readline()
        if header == "":
            break
        seq = fasta.readline()

        record = FastaRecord(header, seq, unique_motif_list)
        #print(record)

os.remove('temp_oneline.fasta')


